[{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/install_guide/wsl/","title":"[WIN ONLY] Windows Subsystem for Linux","tags":[],"description":"","content":" Overview Check your windows version Windows version larger than (or equal to) 19041 Windows version smaller than 19041 Verifying your install Overview Windows now has the ability to install a linux operating system on your machine without the use of an emulator. This gives you a full-featured linux environment that can interact with your normal files.\nCheck your windows version First, please check the build version of Windows that you are using. This can be done by selecting the Windows logo key + r on your keyboard. Once you do that, you should see the windows Run prompt:\nType the command \u0026ldquo;winver\u0026rdquo; (no quotes) into the prompt, as depicted in the image above, and hit enter. You should see a screen similar to this:\nYour build version number is the one that follows the \u0026ldquo;Windows Build\u0026rdquo; text (as highlighted in the above image). Depending on whether your build number is larger or smaller than 19041, please follow the appropriate directions below:\nLarger than (or equal to) 19041 Smaller than 19041 Windows version larger than (or equal to) 19041 In the start menu, search for \u0026ldquo;Powershell\u0026rdquo;, right click and select \u0026ldquo;run as administrator\u0026rdquo;.\nA small blue window should open with a flashing cursor. Please type wsl --install and hit enter:\nThis will take a few minutes to install everything. Once it is finished, please skip to verifying your install.\nIf the above installation did not work- please try to install [using these instructions][Windows version larger smaller than 19041] (even if your version is not smaller than 19041).\nWindows version smaller than 19041 In the start menu, search for \u0026ldquo;Turn Windows features on or off\u0026rdquo; and open that settings window.\nIn the settings window, scroll down to \u0026ldquo;Windows Subsystem for Linux\u0026rdquo;, check the box next to it, and select OK at the bottom of the window.\nYou will not need to restart your computer. Once you have rebooted, open the Windows Store from the start menu.\nIn the Windows Store, search for Ubuntu, and select the version-less one unless you have a reason to pick a specific version.\nOn the Ubuntu page, select Get to install.\nVerifying your install In the start menu, search for and run Ubuntu.\nIf a terminal window opens, you should be good to go! You can also open this terminal inside any folder on your computer by holding shift and right-clicking, then selecting \u0026ldquo;Open Linux shell here.\u0026rdquo;\nThis creates an entirely new operating system on your machine. Thus, things like your git configuration and SSH key for Github will not carry over! You will need to configure git again, and create a new SSH key for this operating system.\nThanks to the UC Davis DataLab\u0026rsquo;s Install Guide for providing a portion of this guide.\n"},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/install_guide/r_rstudio/","title":"R and R Studio","tags":[],"description":"","content":" Overview Common Settings Overview R is a programming language and computing environment specialized for statistical analysis and data manipulation. It\u0026rsquo;s commonly used for performing statistical tests, creating data visualizations, and writing data analysis reports. Despite focusing on statistics, it\u0026rsquo;s a full-fledged programming language, and relatively easy to learn.\nYou should have gotten R and R studio install on the first data of SDS 100. If you did not, please follow the guide here.\nCommon Settings There are a few settings I recommend changing in R studio to make the process of working with it a little easier. In the top bar, click on Tools \u0026gt; Global Options and modify the following.\nUnder General \u0026gt; Basic \u0026gt; Workspace, disable \u0026ldquo;Restore .RData into workspace at startup.\u0026rdquo; Under General \u0026gt; Basic \u0026gt; Workspace, set \u0026ldquo;Save workspace to .RData on exit\u0026rdquo; to Never. Under Code \u0026gt; Editing, enable \u0026ldquo;Soft-wrap R source files.\u0026rdquo; Under Code \u0026gt; Display, enable \u0026ldquo;Show Margin\u0026rdquo; with \u0026ldquo;Margin Column\u0026rdquo; set to 80. Under Code \u0026gt; Display, enable \u0026ldquo;Highlight R Function Calls.\u0026rdquo; Under Code \u0026gt; Display, enable \u0026ldquo;Rainbow Parenthesis.\u0026rdquo; Under Code \u0026gt; Display \u0026gt;, enable \u0026ldquo;Enable preview of named colors and hexadecimal colors.\u0026rdquo; Under R Markdown \u0026gt; Basic, disable \u0026ldquo;Show output inline for all R Markdown documents.\u0026rdquo; Under R Markdown \u0026gt; Visual, disable \u0026ldquo;Use visual editor by default for new documents.\u0026rdquo; Under Appearance, pick a theme you like! [WIN ONLY] Under Terminal \u0026gt; General, set \u0026ldquo;New terminals open with\u0026rdquo; to \u0026ldquo;Bash\u0026rdquo; (You can only do this after you complete the install guide 0: Windows Subsystem for Linux) "},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/syllabus/","title":"Syllabus","tags":[],"description":"","content":" Course Description Course Structure Course Instructor Contacting Me Course Policies Required Materials Attendance Academic Honesty Code of Conduct Accommodation Grading Standards-Based Grading Standards Final Grades Late Work Policy FAQ Course Description The primary aim of Advanced Programming for Data Science (SDS 270) is to teach how to use R to do things. The course will build programming competencies, culminating in students creating their own code packages for R in a group. We will start by creating single functions, learning to debug them, then incrementally add more elements of the programming life cycle such as project management, automatic code testing, and building proper documentation. Supplemental skills useful for advanced programming such as using remote servers, as well as various methods for creating your own data sets will be explored in support of creating the final R packages.\nCourse Structure Each week follows the same basic structure. Monday and Wednesday classes include lectures to introduce new concepts. Each lecture is followed by interactive problem sets designed to reinforce concepts through active learning. Slides from lecture will be posted online after class. The problem sets for any class are \u0026ldquo;due\u0026rdquo; at the start of the next class period when the answers will be released; most problem sets can be completed in class. In-class problem sets do not contribute toward your grade. They are intended to reinforce material and help you test your own understanding.\nFriday classes are devoted to lab activities or project work time. Students are expected to come to class for these activities. Labs include more involved problem sets that incorporate topics from the current and prior weeks. Students work on labs in groups of two to four people. Labs are reviewed through GitHub Classroom where feedback is provided.\nFor a full list of assignments and due dates, please see the course schedule.\nThis is a 4-credit course. You should be spending 12-hours total per week on this course. Expect to spend around 8.25 hours (12 hours - 3.75 hours/week of in-class instruction) on class material per week outside of class.\nCourse Instructor I am a sociologist that studies abuses of power in government. I earned my Ph.D.Â at the University of California, Davis in in sociology with a designated emphasis in computational social science. I combine computational methods such as social network analysis, natural language processing, geospatial analysis, and machine learning with open source and governmental data to uncover patterns of malfeasance and misfeasance by our public servants. From the political networks of politicians and prohibition gangsters to bias hidden in the text of academic recruitment, I use new methods to work on old problems of corruption and inequality.\nI am a visiting assistant professor in the Statistical \u0026amp; Data Sciences (SDS) program. I have experience working with both United States and United Kingdom governmental organizations applying machine learning to real-world problems. In the UK, I worked with the national lab for data science and machine learning, the Alan Turing Institute, on early-detection systems in foster care to assure children are receiving adequate services. Meanwhile in the US I worked with the Internal Revenue Service to build a machine learning system that determined the credibility of incoming fraud reports.\nContacting Me Slack Office Hours You can send me a message on the course Slack workspace, and I will respond when I am able, typically within 24 hours during the work week. To message me, click the + button next to \u0026ldquo;Direct Messages\u0026rdquo; and search for my name.\nIf your question is not sensitive in nature, consider putting it in the #coding-help or #course-help channel instead. There is a good chance one of your classmates will be able to answer before I can.\nSlack questions should be brief or administrative in nature. For more in-depth questions and troubleshooting please attend office hours.\nYou can schedule a meeting with me on Calendly. Drop-ins are welcome, but priority is given to those who make an appointment. Group appointments, to address a similar question, are welcome.\nIf you are coming to office hours with a coding question, make sure you have the code ready at the start of your appointment. Have your computer booted up and your project open.\nIf you cannot find an open time slot, please message me for an appointment. I will attempt to find a time that works for both of us.\nCourse Policies Required Materials Students are not expected to buy any materials for this course. Data science is built on free and open collaboration. There is no shortage of high-quality learning material available. This reader, as well as all assignments, are currently available for free.\nStudents are required to have a working computer (preferably a laptop) and reliable internet connection for this course. Any recent computer should be sufficient, with the notable exception of Chromebooks. Chromebooks lack access to the majority of the tools used by data scientists.\nIf you only have access to a Chromebook, please speak with me as soon as possible.\nAttendance I will not be taking attendance in this course, and you do not need to inform me when you will be absent. If you are sick, please stay home. Given the standards-based grading system (discussed below), no single class, assignment, or even quiz will negatively impact your grade. That said, it will be very difficult to keep up with course material without consistent attendance.\nIf you miss a class, you should contact a peer to discuss what was missed, and check the course reader website for any upcoming deadlines. I won\u0026rsquo;t have the capacity to re-deliver missed material in office hours.\nQuizzes cannot be made up after the open period has passed. If you have a known scheduling conflict with a quiz, please speak with me as soon as possible to arrange an alternative time.\nPlease see the SDS department\u0026rsquo;s official policy regarding remote learning:\nIn keeping with Smith\u0026rsquo;s core identity and mission as an in-person, residential college, the Program in Statistical \u0026amp; Data Sciences affirms College policy (as articulated by Provost Michael Thurston and Dean of the College Alex Keller) that students will attend class in person. As such, SDS courses will not provide options for remote attendance. Students who have been determined to require a remote attendance accommodation by the Office of Disability Services will be the only exceptions to this policy. As with any other kind of accommodations under the Americans with Disabilities Act (ADA), please notify your instructor during the first week of classes to schedule a meeting with them to discuss how we can work with you to provide the most accessible course possible.\nAcademic Honesty Data science is inherently collaborative, so I fully expect students to collaborate. You are encouraged to work together on most assignments\u0026mdash;ask questions on Slack, create study groups, and share helpful resources you find. However, anything you submit must be your own work. You need to be the person who writes the text and/or code. Multiple students should not submit identical work. Please note: The only avenue in which collaboration is not allowed is on quizzes.\nAll students, staff, and faculty are bound by the Smith College Honor Code:\nStudents and faculty at Smith are part of an academic community defined by its commitment to scholarship, which depends on scrupulous and attentive acknowledgement of all sources of information and honest and respectful use of college resources.\nSmith College expects all students to be honest and committed to the principles of academic and intellectual integrity in their preparation and submission of course work and examinations. All submitted work of any kind must be the original work of the student who must cite all the sources used in its preparation.\n-Smith Academic Honor Code Any cases of dishonesty or plagiarism will be reported to the Academic Honor Board. Examples of dishonesty or plagiarism include:\nSubmitting work completed by another student as your own. Copying and pasting text or code from sources without quoting and citing the author. Paraphrasing material from another source without citing the author. Failing to cite your sources correctly. Falsifying or misrepresenting information in submitted work. Having another student or service complete assignments for you. Learning to code is similar to learning a new language; you will only learn by doing. No amount of rote copying will advance you beyond the most elementary levels of understanding. Please keep this in mind.\nIf someone else helps you understand a concept better, give them a nod in the #shoutouts channel on Slack.\nCode of Conduct As participants in this course we are committed to making participation a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion. Examples of unacceptable behavior by participants in this course include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.\nAs the instructor I have the right and responsibility to point out and stop behavior that is not aligned with this Code of Conduct. Participants who do not follow the Code of Conduct may be reprimanded for such behavior. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the instructor.\nAll students and the instructor are expected to adhere to this Code of Conduct in all settings for this course: seminars, office hours, and over Slack.\nThis Code of Conduct is adapted from the Contributor Covenant.\nAccommodation Smith College is committed to providing support services and reasonable accommodations to all students with disabilities. To request an accommodation, please register with the Office of Disability Services (ODS) at the beginning of the semester.\nGrading Standards-Based Grading This course will be graded using a standards-based grading system. Rather than tallying up the percentage of questions you answer correctly, I assess your responses by using a pre-defined set of course standards and then assign a level of proficiency. Throughout the semester, this course offers multiple opportunities to showcase the depth of your understanding in light of these standards.\nIn traditional points-style grading, an average is taken of all your assignments, and your final grade is based on that average. This means all assignments are given equal consideration in your final grade.\nIn contrast, standards-based grading is focused on your progression through the course. Functionally, only your best score for each standard is kept. All others are effectively forgotten. The hope is that without the worry of \u0026ldquo;getting a bad grade\u0026rdquo; when you are new to a concept, you will feel free to safely engage with complicated topics early on, make mistakes, and have opportunities to show improvement without penalization.\nA standards-based grading system carries a number of other benefits:\nLearning targets for the course are clearly defined from the outset. Every graded assignment is directly tied to at least one standard. There is no \u0026ldquo;busy work\u0026rdquo; with a standards-based system. No single assignment will make-or-break your grade. You have multiple opportunities to demonstrate fluency in a standard. This rewards students that take the time to practice and learn from their mistakes. It prioritizes student growth throughout the course of the semester. Assessments in a standards-based system are much clearer than in a point-based grading system. Saying that I\u0026rsquo;ve become proficient in doing X, Y, or Z means more than saying that I earned a 92.5 in my course. A standards-based grading system makes it easier to monitor your own progress towards a certain grade. There is no competition and no curve in a standards-based system. The only person you are ever compared with is your past self. Help each other often and freely. Standards The following table lists all the standards you are evaluated on in this course. There are 8 total standards, separated into 5 categories. Each standard states what conditions must be met to reach each proficiency level. There are four proficiency levels for each standard, each requiring more complete understanding of the material. These levels are inclusive, meaning to reach \u0026ldquo;Exceeds Standard\u0026rdquo; you must also meet all the requirements of \u0026ldquo;Meets Standard\u0026rdquo; and below.\nYou will have multiple opportunities to demonstrate your understanding of each standard. Any assignment that is reviewed is an opportunity to increase your proficiency level in a standard. In addition to the levels of proficiency, there is also an extra point available in each standard called \u0026ldquo;Individual Standard.\u0026rdquo; You may fulfill this requirement only on quizzes, but only need to reach the \u0026ldquo;Meets Standard\u0026rdquo; criteria on a standard to do so.\nYou can demonstrate proficiency in any reviewed assignment, but can only fulfill the \u0026ldquo;Individual Standard\u0026rdquo; criteria on a quiz.\nStandard Does Not Meet Standard Progressing Toward Standard Near Standard Meets Standard Exceeds Standard Individual Standard Functions Copies-and-pastes similar code with small changes. Creates simple functions with predetermined inputs. Creates functions that that make use of arguments to modify their output. Creates functions that can handle novel inputs, with logic and error checking to determine outputs. Creates functions that can handle arbitrary input through the use of \". . .\" or S3 classes. Iteration Copies-and-pastes similar code several times to repeat identical tasks on different data. Calls an identical function (even self-made) to repeat a task on different data. Uses loop style iteration to act on sequences of data. Uses apply style iteration to act on sequences of data. Can iterate in parallel and justify the overhead costs. Data Structures Cannot differentiate between data types (numeric, logical, character, etc.). Uses the wrong type during analyses. Can subset data from vectors or dataframes by position or condition. Works with lists when appropriate and can subset list elements effectively by position or condition. Works with attributes effectively. Can modify and use attributes to manipulate or create data structures. Works with nested lists by inputting and sub-setting programmatically defined arbitrary elements. Code Style Code style is inconsistent and lacks appropriate comments. Code comments explain the general purpose of the code file. Indentation is consistent and predictable. Code comments explain the broad strokes of intended behavior per section. Files make use of the built-in section headings in R Studio. Comments explain code step-by-step. All dependencies and parameters are clearly provided and explained at the top of code files. Code includes built in error checking for anticipated problems. These checks will output warnings or stop execution of code. git/Github Does not use git for version control. Uses git for version control on individual projects with appropriately sized commits with descriptive commit messages. Uses git and GitHub for version control on group work with appropriately sized commits with descriptive commit messages. Effectively creates and merges branches of appropriate size. No sensitive files are committed. Effectively requests and performs code review on pull requests using GitHub. Project Management Does not use project management tools. Project management is only conducted though messaging, such as on slack. User the GitHub issue tracker to set milestones, but does not fill out associated metadata such as who is responsible for the issue and when it is due. Uses the GitHub issue tracker to break down and assign actionable work with all appropriate metadata included. Uses projects KanBan boards to break down tasks into actionable steps, and track their completion. Package Function Package cannot be installed. Package does not pass check(). One or more component functions or unit tests of package do not execute. Package includes and passes all unit tests to ensure expected functionality. Package passes check() with no warnings. Package Documentation Package has no documentation. Team can create a ReadMe file which explains the overall purpose of the package and its use. Package includes help files for all functions, including a definition, expected inputs, outputs, and clear descriptions of arguments. Vignettes are provided for the major functionalities of the package. Help files include reproducible examples of function usage. A live website is accessible for the package to share resources and vignettes. Final Grades Your completion of these standards are converted into a final letter grade using the following process. Each of the 8 standards will be converted into a five-point scale, with one point available for meeting the \u0026ldquo;Individual Standard\u0026rdquo; on a quiz.\n1 Point. \u0026ldquo;Does Not Meet Standard\u0026rdquo; 2 Points. \u0026ldquo;Progressing Toward Standard\u0026rdquo; 3 Points. \u0026ldquo;Near Standard\u0026rdquo; 4 Points. \u0026ldquo;Meets Standard\u0026rdquo; 5 Points. \u0026ldquo;Exceeds Standard\u0026rdquo; +1 Point. \u0026ldquo;Individual Standard\u0026rdquo; On this scale, there are 48 points total in the course (8 standards * 6 possible points). I sum the highest level of proficiency you reach in each standard over the course of the semester to arrive at your final score. For example, if someone were to reach \u0026ldquo;Exceeds Standard\u0026rdquo; in all standards, but could never do so on a quiz, they would receive 40 of 48 points (5 points * 8 standards). Similarly, if someone reaches \u0026ldquo;Meets Standard\u0026rdquo; in all topics, including on quizzes, but did not reach \u0026ldquo;Exceeds Standard\u0026rdquo; in any topic, they would likewise receive 40 of 48 points.\nThe summed points will be converted into letter grades using the following table.\nLetter Points A 45, 46, 47, 48 A- 43, 44 B+ 41, 42 B 39, 40 B- 37, 38 C+ 35, 36 C 33, 34 C- 31, 32 D+ 29, 30 D 27, 28 D- 25, 26 F 0 - 24 Late Work Policy Assignments turned in late will not be reviewed, and will not be considered for demonstrating proficiency in course standards. Keep in mind, missing an assignment will not hurt your grade, but does remove one chance for you to demonstrate your knowledge of course material. If you do not think you will be able to turn in an assignment by the deadline, you may request an extension. To do so, please send me a message explaining why you are unable to complete the assignment in the expected time frame. Extension requests must be made\u0026ndash;and accepted\u0026ndash;before the assignment due date.\nAfter the due date, late assignments are only reviewed if there are emergency circumstances preventing you from turning the assignment in on time.\nFAQ Q: So if I reach \u0026ldquo;Exceeds Standard\u0026rdquo; and fulfill the individual standard on a quiz for a topic early in the semester, I can just skip those questions for the rest of the class?\nA: Theoretically yes, but I would recommend you answer all questions to make sure you\u0026rsquo;re not letting your knowledge slip.\n"},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/class_worksheets/02_git/","title":"git","tags":[],"description":"","content":" Overview A Simple Repo 1. Make a New Project 2. Your First Commit 3. Making a Change 4. Adding More Files 5. Breaking Things 6. Time Travel for Beginners 7. To the Cloud 8. Conflict Conclusion Overview git is remarkably useful, but it takes an investment in using it well to gain the full benefits. Today we\u0026rsquo;re going to try and develop some good habits. While they sometimes feel like a chore to adhere to, if you continue on in data science, good git practice will save you some day. It saved me from losing days worth of progress on a research paper when my file syncing service corrupted my files.\nA Simple Repo 1. Make a New Project git store information in a special file structure called a repository, commonly called the repo. Under the hood, this is really just a folder that is organized in a very specific way on your computer. While you can go digging through it in the file browser, it is not recommended.\nAll git repositories start with an initialization. For us, that will usually mean starting a new R studio project. It is possible to initialize a git repo in a project that you already have files in, and we will cover that process later in the semester. For now, in the upper right corner of R studio, create a project in a new directory called git_worksheet, and make sure the \u0026ldquo;Create git Repository\u0026rdquo; box is checked when you do.\nOnce the project is created, find the folder in your file browser or finder window, and double click on the \u0026ldquo;git_worksheet.Rproj\u0026rdquo; file to open that R project. In the far upper right of your screen, you should now see that the project is set to git_worksheet.\nYou should also see in the upper right pane a new tab that says git. If you don\u0026rsquo;t, something has gone wrong.\n2. Your First Commit Now that we have a project with a git repository, we can start adding files that we want to keep track of. In general, you want to commit all code files, but not data files. Data files are much larger than what git was made for, and you will quickly run out of storage space on sites like Github if you push them. If you do it by accident, it is possible to break your repo!\nIt is also critically important that you do not commit any files with sensitive information like passwords. Other people will be able to see them, as git is in no way encrypted. It is also very difficult to remove a file from git\u0026rsquo;s memory; it was made to save things!\nNever commit sensitive files like passwords or API keys.\nBefore we go on, a quick review of the git workflow. First, we tell git to start watching the file by staging it. Then, we commit it to git\u0026rsquo;s memory by committing the file. Later in this worksheet, we will then work on pushing files to a remote server online. It is crucial to understand that each of these are separate and distinct steps!\nCreate a new .txt file called git.txt and save it within your project folder. Copy the following into that text file.\niiii tttt i::::i ttt:::t iiii t:::::t t:::::t ggggggggg gggggiiiiiii ttttttt:::::ttttttt g:::::::::ggg::::gi:::::i t:::::::::::::::::t g:::::::::::::::::g i::::i t:::::::::::::::::t g::::::ggggg::::::gg i::::i tttttt:::::::tttttt g:::::g g:::::g i::::i t:::::t g:::::g g:::::g i::::i t:::::t g:::::g g:::::g i::::i t:::::t g::::::g g:::::g i::::i t:::::t tttttt g:::::::ggggg:::::g i::::::i t::::::tttt:::::t g::::::::::::::::g i::::::i tt::::::::::::::t gg::::::::::::::g i::::::i tt:::::::::::tt gggggggg::::::g iiiiiiii ttttttttttt g:::::g gggggg g:::::g g:::::gg gg:::::g g::::::ggg:::::::g gg:::::::::::::g ggg::::::ggg gggggg Look at the git panel in the upper right pane of R Studio. You should now see the git.txt file we just saved. It should have a yellow question marks next to it. That means git is not currently keeping track of that file. It is unknown.\nWe want to tell git to start tracking git.txt. To do so, click on the white check box under the \u0026ldquo;Staged\u0026rdquo; column next to git.txt. Once you click that, the file is staged, meaning when we make our next commit to the git timeline, that file will be saved.\nLet\u0026rsquo;s make out first commit. In the git pane, click on the \u0026ldquo;Commit\u0026rdquo; button. This will open the commit window. Nothing has been committed yet.\nIn this window we will see all our files again on the top left, as well as two new areas. In the top right is a box labeled \u0026ldquo;Commit message.\u0026rdquo; This is where you can write a message that will appear on the git timeline describing what you are adding or changing in this commit. For now, type in \u0026ldquo;adding git art.\u0026rdquo; Press the \u0026ldquo;Commit\u0026rdquo; button once you are done. A progress window will pop up letting you know what is happening. Once it stops changing, you can close it and the commit window.\n3. Making a Change We\u0026rsquo;ve now saved a checkpoint of our git.txt file. This means we can return this file to this exact state at any point in the future. We can even delete it and bring it back from oblivion! For now, we\u0026rsquo;ll just make some changes to it.\nSay this was actually the start of a little report on what git does. Below the git logo, write a three sentence summary of what you know about git thus far. Save the file when you are done.\nNow that we\u0026rsquo;ve saved out file, it should appear in our git panel again with a blue \u0026ldquo;M\u0026rdquo; next to it, signifying the file has been \u0026ldquo;Modified.\u0026rdquo; Repeat the process of staging it (clicking check box), and committing it (going into the commit menu, adding a message, and pressing commit). We have now added another checkpoint to our git timeline.\ngit can only ever see changes to your file after you have saved the file.\n4. Adding More Files Thus far, working with one file seems a lot like saving with extra steps. The true value of git starts to appear once we have multiple files in a project. Create a new R script file called octocat_load.R, fill it with the following, and save it:\n# Code to load in Octocat (github mascot) art octocat = readLines(\u0026quot;https://raw.githubusercontent.com/Adv-R-Programming/Adv-R-Reader/main/content/class_worksheets/02_git/octocat.txt\u0026quot;) writeLines(octocat, \u0026quot;./octocat.txt\u0026quot;) readLines works like read.csv in that it is a function to load data into R. Instead of loading CSVs though, it loads text files. Execute this code and then commit the octocat_load.R, but not the newly created octocat.txt file.\nCreate another new R script called octocat_print.R. Inside this file, copy the following code into it:\n# to load the local octocat data and print it octocat = readLines(\u0026quot;./octocat.txt\u0026quot;) print(octocat) Save this file and commit it.\nCreate one last script called octocat_count.R. In this script, copy the following:\n# to count the lines in octocat.txt octocat = readLines(\u0026quot;./octocat.txt\u0026quot;) length(octocat) Save this file and commit it. We now have a toy example of a fairly common data science workflow:\noctocat_load.R downloads the file from the internet and saves it locally. octocat_print.R is like exploratory data analysis, where we look at the data to understand it. octocat_count.R performs some sort of analysis to convert our data into information. In short, get the data, inspect the data, and perform analyses on the data.\n5. Breaking Things Now that we have out mini data science workflow, we can start to modify it (and break it). Start by opening octocat_load.R. We can replace the readLines function to load the local version of octocat, because we no longer need to grab it from the internet. Replace:\noctocat = readLines(\u0026quot;https://raw.githubusercontent.com/Adv-R-Programming/Adv-R-Reader/main/content/class_worksheets/02_git/octocat.txt\u0026quot;) With\noctocat = readLines(\u0026quot;./octocat.txt\u0026quot;) Save the file and commit the changes.\nSay we want to quickly modify our octocat art by adding an extra line for a caption. Create a new script called octocat_modify.R and add the following code to it:\n# to add a caption to octocat octocat = readLines(\u0026quot;./octocat.txt\u0026quot;) octocat = c(octocat, \u0026quot;ASCII Art of the Octocat Mascot for Github\u0026quot;) writeChar(octocat, \u0026quot;./octocat.txt\u0026quot;) We use c() here to combine octocat with our caption, and then assign it back to our octocat object. Save octocat_modify.R, run all the code, and commit it to the repo.\nGreat, now we have out data updated, let\u0026rsquo;s open up our octocat_print.R and run it again to see our beautiful art again.\nUh-oh. It doesn\u0026rsquo;t work anymore. You may have noticed we used the wrong function to save out modified octocat object (we used writeChar rather than writeLines). That\u0026rsquo;s fine, we can load the data in again in our octocat_load.R script\u0026hellip; but we can\u0026rsquo;t because we changed that script to use the local copy which we just broke.\nTime to power up the time machine.\n6. Time Travel for Beginners In the git pane, click on the \u0026ldquo;History\u0026rdquo; button to open up the git timeline (not the history tab, the history button in the git tab).The history window is broken in to to main parts.\nAt the top you have your git timeline, which shows all of your commits in this project. The timeline shows you commit messages, the author of those commits, when the commit happened, and an \u0026ldquo;SHA\u0026rdquo; which you can think of as a unique ID for that commit. On the bottom is the diff or \u0026ldquo;difference\u0026rdquo; window. It will show you what files were changed in that commit, and how they changes. Sections in green were added, while sections in red were removed.\nFind the commit in the timeline where we changed octocat_load.R. Inside the diff window, on the box labeled octocat_load.R, click on the \u0026ldquo;View file @ ########\u0026rdquo; button in the upper right of the box. This will open the file as it was when you committed it. Use this to fix our octocat_load.R script, and save an working copy of octocat.txt again.\n7. To the Cloud Now we\u0026rsquo;re going to go over how to set our new repo up on Github. Head to https://github.com/ and log in. Once you log in, look to the left side of the screen, and click on the green \u0026ldquo;New\u0026rdquo; button.\nThis will take us to the screen to create a new repo. Enter \u0026ldquo;git_worksheet\u0026rdquo; under Repository name and then scroll to the bottom of the page and click \u0026ldquo;Create repository.\u0026rdquo; You will now see a page called \u0026ldquo;Quick Setup.\u0026rdquo; At the top of this page, make sure you select the \u0026ldquo;SSH\u0026rdquo; option. The HTTPS will work, but later you wil have to use your username and password to log in every time you want to push or pull.\nNext, look at the second box that says \u0026ldquo;\u0026hellip;or push an existing repository from the command line.\u0026rdquo;\nWe are going to use these commands to link our local repo with the one on Github. In R Studio, look at the lower left console pane, and click on the \u0026ldquo;Terminal\u0026rdquo; tab. Enter the three lines of code from Github into the terminal one by one. They should look like this (but use the ones from Github, not these!):\ngit remote add origin git@github.com:\u0026lt;REPO-DETAILS\u0026gt; git branch -M main git push -u origin main Once you have done that, close R Studio and re-open your project (or right click or command click anywhere on R Studio and select \u0026ldquo;Reload\u0026rdquo;). Once you have done that, look at the git pane in the upper right. You will notice you now have the option to click on the \u0026ldquo;Pull\u0026rdquo; and \u0026ldquo;Push\u0026rdquo; buttons. Click \u0026ldquo;Push\u0026rdquo; now, wait for the process to finish, then refresh the page for your new repo on github. You should see your files there!\n8. Conflict So far so good, but sometimes things go awry. On Github, click on the octocat_count.R script to be taken to its page. In the toolbar above the code, on the right hand side, you will see a pencil icon. Click that to edit the file. Add a new comment to the second line that says:\n# Conflict! Scroll to the bottom of the page and click \u0026ldquo;Commit Changes.\u0026rdquo; This simulates as if someone else, or yourself, changed the file somewhere else. We\u0026rsquo;ll get into more detail about collaborating with git later on in the semester.\nNow, in R Studio, open up octocat_count.R and on line 2 there, add a comment that says:\n# It happens. Save the file and commit it using the git pane.\nNow, press the \u0026ldquo;Pull\u0026rdquo; button in the git pane. This time an error will pop up saying you have a conflict. A conflict happens whenever git can\u0026rsquo;t reconcile the differences between two versions of the same file, so it will ask you to resolve the conflict. In R Studio, around line 2 in octocat_count.R, you should now see the following:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD # it happens ======= # Conflict! \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; \u0026lt;NUMBERS AND LETTERS\u0026gt; This is git pointing out where the two versions of the file are different. All the differences will exist between the two rows of arrows, the \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; and \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;. The line of equal signs, =======, separates the two versions.\nTo resolve this, we need to pick which version we want to keep. For now, edit this area, so only the comments that says # Conflict! remains. You are basically creating the \u0026ldquo;canonical\u0026rdquo; version of the file, so it should look like whatever you want all versions of the file to look like. That means you should also delete the \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD, equal signs, and \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; \u0026lt;NUMBERS AND LETTERS\u0026gt;.\nSave the file and commit it again. After you commit the changes, press the \u0026ldquo;Push\u0026rdquo; button to update github.\nConclusion That was an abstracted version of the full git workflow! We\u0026rsquo;ll have lots of time to practice it throughout the semester, so don\u0026rsquo;t feel worried if it didn\u0026rsquo;t feel normal yet. It takes practice.\nWhile it can be a chore, having good git disciple not only can save yourself a lot of heartache, but it makes you a great team member for real data science projects. Who wouldn\u0026rsquo;t want a time wizard who can move back and forth between long lost code versions?\n"},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/install_guide/git/","title":"git","tags":[],"description":"","content":" Overview git on Windows git on Mac Overview git is a tool for version control and collaboration. It is the tool used by data science teams big and small to keep track of code. Think of it like track changes in Word or Google docs, but for code files.\nYou will also need an account on Github. Please create one here.\ngit on Windows Follow these step-by-step instructions if you\u0026rsquo;re installing Git on a Windows machine:\nFirst, launch a web browser, the image below shows the Microsoft Edge browser.\nNext, navigate to the following Git download URL in your browser https://git-scm/com/downloads.\nSelect \u0026ldquo;Windows\u0026rdquo; from the Downloads portion of the Git webpage. Git will display the following page and automatically being downloading the correct version of the Git software. If the download doesn\u0026rsquo;t start automatically, click on the \u0026ldquo;Click here to download manually link.\u0026rdquo;\nWhen the download is complete, open/Run the downloaded file (it may look different in different browsers).\nA screen will appear asking for permissions for the Git application to make changes to your device. Click on the Yes button.\nClick Next to accept the user license.\nLeave the default \u0026ldquo;Destination Location\u0026rdquo; unchanged (usually C:\\Program Files\\Git) and hit Next\nYou will see a screen like the one below asking you to \u0026ldquo;Select Components.\u0026rdquo; Leave all of the default components selected. You can also check the boxes next to \u0026ldquo;Additional Icons\u0026rdquo; and it\u0026rsquo;s sub-item, \u0026ldquo;On the Desktop\u0026rdquo; if you would like. Your completed configurations window should have the following components selected:\nAdditional Icons -\u0026gt; On the Desktop Windows Explorer integration -\u0026gt; Git Bash Here -\u0026gt; Git GUI Here Git LFS (Large File Support) Associate .git* configuration files with default text editor Associate .sh files to be run with Bash The next screen will ask you to pick a \u0026ldquo;default editor, click the drop down box and select\u0026quot;Use the Nano editor by default.\u0026rdquo; The press Next.\nOn the next screen, it will ask to override the default \u0026ldquo;branch name.\u0026rdquo; Select the \u0026ldquo;Override the default branch name for new repositories\u0026rdquo; option, and in the text box type \u0026ldquo;main.\u0026rdquo; Press Next.\nThe next screen will ask you if you want to adjust your path environment. Leave the default of \u0026ldquo;Git from the command line and also from 3rd-party software.\u0026rdquo; Press Next.\nOn the next screen, keep the default option of \u0026ldquo;Use bundled OpenSSH.\u0026rdquo; Press Next\nOn the next screen, keep the default option of \u0026ldquo;Use the OpenSSL library.\u0026rdquo; Press Next.\nLeave the default \u0026ldquo;Checkout Windows-style, commit Unix-style line endings\u0026rdquo; selected on the next page and hit Next:\nKeep the default \u0026ldquo;Use MinTTY (the default terminal of MSYS2)\u0026rdquo; selected on the \u0026ldquo;Configuring the terminal emulator to use with Git Bash\u0026rdquo; window and hit Next:\nKeep the default value of \u0026ldquo;Default (fast-forward or merge)\u0026rdquo; on the \u0026ldquo;Choose the default behavior of \u0026lsquo;git pull\u0026rsquo;\u0026rdquo; page and hit Next:\nKeep the default value of \u0026ldquo;Git Credential Manager Core\u0026rdquo; on the \u0026ldquo;Choose a credential helper\u0026rdquo; page and hit Next:\nKeep the default values on the \u0026ldquo;Configuration extra options\u0026rdquo; page by keeping \u0026ldquo;Enable file system caching\u0026rdquo; checked and \u0026ldquo;Enable symbolic links\u0026rdquo; unchecked and then hit Next:\nMake sure that no options are checked in the \u0026ldquo;Configuring experimental options\u0026rdquo; page and hit Install:\nAfter you hit this Install button as per above, you will see an install progress screen like the one below:\nWhen the install is complete, a new, \u0026ldquo;Completing the Git Setup Wizard\u0026rdquo; window like the one below will appear:\nMake sure that all of the options on this window are unchecked as in the image below and then hit the Finish button:\nThis will complete your installation process. Right click on your desktop, and click on \u0026ldquo;Git Bash here.\u0026rdquo; A black terminal window will open. Type in git --version to check if everything was installed correctly. If you see git version \u0026lt;NUMBERS\u0026gt; you\u0026rsquo;re all set. Now we need to configure some settings.\nClick on the window, and then copy the following and press enter, changing \u0026ldquo;Jane Doe\u0026rdquo; to your name. You must put your name in quotes. git config --global user.name \u0026quot;Jane Doe\u0026quot;\nLastly, copy the following and press enter, changing the email to your email address. git config --global user.email jdoe@example.com\ngit on Mac To install git on a Mac, first open the launchpad by clicking its icon, pressing F4, or by making a pinch motion on the track pad with three fingers and your thumb.\nA terminal window will open up, showing your account name and a symbol, usually $ or #, with a flashing cursor afterwards. You will enter text here to issue commands.\nEnter type in the word git and press enter.\nA window will pop up, asking if you want to install \u0026ldquo;developer tools.\u0026rdquo; Click Install.\nA prompt will appear asking you to agree to the license agreement, click Agree.\nThe software will then start installing. It will take a few minutes to finish. When it is done you will see the following window. Click Done.\nTo make sure everything is installed correctly, go back to the terminal window and enter git --version. You should see a message that says git version \u0026lt;NUMBERS\u0026gt;. If you do, you can move on.\nNext we will need to set up some options. Fist, copy the following into the terminal and press enter to change the default branch name: git config --global init.defaultBranch main\nNext, copy the following and press enter, changing \u0026ldquo;Jane Doe\u0026rdquo; to your name. You must put your name in quotes. git config --global user.name \u0026quot;Jane Doe\u0026quot;\nLastly, copy the following and press enter, changing the email to your email address. git config --global user.email jdoe@example.com\nThanks to the UC Davis DataLab\u0026rsquo;s Install Guide for providing a portion of this guide.\n"},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/install_guide/","title":"Install Guides","tags":[],"description":"","content":" [WIN ONLY] Windows Subsystem for Linux Set up a full linux terminal on Windows machines.\nR and R Studio Install and configure R \u0026amp; R Studio.\ngit Learn to install and configure git.\nGithub Learn to create SSH keys and link them with GitHub.\nR Packages Install many of the packages we will use this semester.\n"},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/install_guide/github/","title":"Github","tags":[],"description":"","content":" Overview Create an Account Creating SSH Keys and Adding to Github Overview Github is a online code repository that great expands the utility of git. It acts as a clearinghouse for code, and is used worldwide by researchers, government, and industry.\nCreate an Account First up, we need to create an account on github.com. Navigate to the site, and click the Sign up button in the upper right.\nEnter your email and create a password.\nYou will most likely receive an email from Github asking to confirm your account. Go and click that.\nCreating SSH Keys and Adding to Github Creating a new SSH key will invalidate all the places your current SSH key is used! Do not create a new one if you already have one!\nSSH Keys are a way to identify your computer when accessing external resources. Think about it like a password for your computer to log in by itself. The first thing we need to do is create an SSH key for your computer. Open up R Studio, and click on the Terminal tab in the bottom left pane. Copy the following, enter your correct email, and press enter to create a key: ssh-keygen -t ed25519 -C \u0026quot;your_email@example.com\u0026quot;\nYour terminal will look slightly different than my pictures, but the process is the same.\nIt will ask where you want to save the key. Accept the defaults by pressing Enter.\nIt will then ask you to create a pass phrase, press enter twice to skip this step.\nIt will then show a printout of your key, and a little bit of art. I\u0026rsquo;ve greyed mine out here for security.\nNext, type cd and press enter, followed by cat .ssh/id_ed25519.pub. It will print out a code starting with \u0026ldquo;ssh-ed25519 \u0026hellip; your_email@smith.edu.\u0026rdquo; You want to highlight all of that, including the \u0026ldquo;ssh-ed25519\u0026rdquo; and your email, press CTRL or command + C to copy it.\nWe will now return to github.com and login.\nIn the upper right hand corner you will see your user profile dropdown. Click on that and go to Settings.\nOn your setting screen, in the left hand menu, click on \u0026ldquo;SSH and GPG keys.\u0026rdquo;\nOn the next screen, click the green button in the upper right that says \u0026ldquo;New SSH Key.\u0026rdquo;\nOn the following screen, name your key, and paste the text we copied into the \u0026ldquo;Key\u0026rdquo; box. Then press the \u0026ldquo;Add SSH Key\u0026rdquo; button.\nIf you are using multiple terminals (like WSL and git Bash on windows) your SSH keys are specific to each of those programs. So, if you make a key in git Bash, then try to push using WSL, GitHub will not recognize you. You will need to repeat this process for each terminal you intend to use. The same is true of the terminals on remote servers!\n"},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/class_worksheets/","title":"Worksheets","tags":[],"description":"","content":" git Practise some git fundamentals.\n"},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/labs/","title":"Labs","tags":[],"description":"","content":"All labs will be turned in through Github Classroom. You will set up your student account in the process on completing your first lab. Click the link below to open the lab.\nLabs to be posted here\n"},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/install_guide/r_packages/","title":"R Packages","tags":[],"description":"","content":" Overview Overview R uses a number of packages to work with data, which are largely community created. This means many of them do not come pre-installed with R. Here is a list of packages we will use this semester. You should be able to paste this into the R console and press enter to install them all at once.\ninstall.packages(\u0026quot;tidyverse\u0026quot;); install.packages(\u0026quot;devtools\u0026quot;); install.packages(\u0026quot;dplyr\u0026quot;); install.packages(\u0026quot;todor\u0026quot;); install.packages(\u0026quot;future\u0026quot;); install.packages(\u0026quot;rvest\u0026quot;); install.packages(\u0026quot;RSQLite\u0026quot;) "},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/slides/","title":"Slides","tags":[],"description":"","content":" Lecture Slides 02_1_git.html (6 MB) 02_2_objects.html (6 MB) "},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/hidden/","title":"Hidden","tags":[],"description":"","content":""},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/credits/","title":"Credits","tags":[],"description":"","content":"Content Thank you to Dr. Ben Baumner for providing materials as reference as I prepared this course reader.\nBackend Thanks to the Hugo projects for providing the infrastructure for this site. Thank you to the team that created Hugo Learn Theme, the basis of this reader.\nPackages and libraries mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support "},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/","title":"Home","tags":[],"description":"","content":" Advanced Programming for Data Science Quick Links Resource Link Description Syllabus Quick access to all important course information. Moodle Grades and quizzes will be available on the course Moodle. Slack Main communication channel for the course. Spinelli Center The Spinelli Center offers drop-in tutoring hours in Sabin-Reed 301 or on Zoom. Office Hours Sign up for a slot in office hours here. Overview Info Value Who Dr. Jared Joseph What SDS 270: Advanced Programming for Data Science When Mon/Wed/Fri 9:25-10:40 Where Sabin-Reed 220 Schedule Below is the tentative schedule for the course. While we will try to keep to this schedule, unanticipated situations (and mountain day) may require us to adjust. Each row is a class meeting, with the readings and assignments due on that day listed.\nWeek Date Topic Readings Due 1 1/27/2023 (Fri) Roadmap Class Syllabus Update R/R Studio Sign up for class slack 2 1/30/2023 (Mon) Intro Git Bryan, J. (2018). Excuse Me, Do You Have a Moment to Talk About Version Control? American Statistician, 72(1), 20-27. Complete all Install Guides Welcome Survey Data Survey 2 2/1/2023 (Wed) Objects in R Wickham, H. (2020). 3 Vectors. In Advanced R. Chapman \u0026amp; Hall. 2 2/3/2023 (Fri) Lab 1 3 2/6/2023 (Mon) Functions Wickham, H. (2020). 6 Functions. In Advanced R. Chapman \u0026amp; Hall. 3 2/8/2023 (Wed) Debugging \u0026amp; Flow Bryan, J., \u0026amp; Hester, J. (2021). Chapter 11 Debugging R code. In What They Forgot to Teach You About R. Grolemund, G., \u0026amp; Wickham, H. (2017). 8 Conditions. In R for Data Science. O'Reilly. Lab 1 3 2/10/2023 (Fri) Lab 2 4 2/13/2023 (Mon) Iteration [21.1-21.3 Only] Wickham, H., \u0026amp; Grolemund, G. (2017). 21 Iteration. In R for Data Science. O\u0026lt;92\u0026gt;Reilly. 4 2/15/2023 (Wed) Apply \u0026amp; Lists Lab 2 4 2/17/2023 (Fri) Lab 3, Quiz 1 Open 5 2/20/2023 (Mon) Web Scraping Irizarry, R. A. (2022). Chapter 24 Web scraping. In Introduction to Data Science. Zimmer, M. (2010). But the data is already public: On the ethics of research in Facebook. Ethics and Information Technology, 12(4), 313-325. 5 2/22/2023 (Wed) RegEx Lab 3 5 2/24/2023 (Fri) Lab 4 Quiz 1 Due 6 2/27/2023 (Mon) Parallel Jones, M. (2017). Quick Intro to Parallel Computing in R. Peng, R. D. (2022). 22 Parallel Computation. In R Programming for Data Science. 6 3/1/2023 (Wed) PDF Data Extraction rOpenSci. (n.d.). Introduction to tabulizer. rOpenSci. (n.d.). Using the Tesseract OCR engine in R. Lab 4 6 3/3/2023 (Fri) Lab 5, Quiz 2 Open 7 3/6/2023 (Mon) Bash Irizarry, R. A. (2022). Chapter 39 Organizing with Unix. In Introduction to Data Science. 7 3/8/2023 (Wed) Remote Servers Tanner, A. (2022, September 18). Working with remote computers. Lab 5 7 3/10/2023 (Fri) RECAP/MSA Quiz 2 Due 8 3/13/2023 (Mon) No Class 8 3/15/2023 (Wed) No Class 8 3/17/2023 (Fri) No Class 9 3/20/2023 (Mon) Package Creation [Skim] Wickham, H., \u0026amp; Bryan, J. (2023). 2 The Whole Game. In R Packages (2nd ed.). O'Reilly. Final Project Ideas 9 3/22/2023 (Wed) Project Management Quickstart for GitHub Issues. (n.d.). GitHub Docs. Quickstart for Projects. (n.d.). GitHub Docs. Managing labels. (n.d.). GitHub Docs. About milestones. (n.d.). GitHub Docs. 9 3/24/2023 (Fri) Finals Work Time 1 10 3/27/2023 (Mon) Adv Git Community, T. T. W. (2022a). Git Branches. In The Turing Way: A handbook for reproducible, ethical and collaborative research. Community, T. T. W. (2022b). Merging Branches in Git. In The Turing Way: A handbook for reproducible, ethical and collaborative research. Community, T. T. W. (2022c). Retrieving and Comparing Versions. In The Turing Way: A handbook for reproducible, ethical and collaborative research. 10 3/29/2023 (Wed) Package Documentation Wickham, H., \u0026amp; Bryan, J. (2023). 17 Function documentation. In R Packages (2nd ed.). O'Reilly. Wickham, H., \u0026amp; Bryan, J. (2023). 19 Other markdown files. In R Packages (2nd ed.). O'Reilly. 10 3/31/2023 (Fri) Lab 6 11 4/3/2023 (Mon) Adv Functions 11 4/5/2023 (Wed) S3 Lab 6 11 4/7/2023 (Fri) Lab 7, Quiz 3 Open 12 4/10/2023 (Mon) Testing Wickham, H., \u0026amp; Bryan, J. (2023). 14 Testing basics. In R Packages (2nd ed.). O'Reilly. Wickham, H., \u0026amp; Bryan, J. (2023). 15 Designing your test suite. In R Packages (2nd ed.). O'Reilly. 12 4/12/2023 (Wed) Benchmarking Wickham, H. (2020). 23 Measuring performance. In Advanced R. Chapman \u0026amp; Hall. Lab 7 12 4/14/2023 (Fri) Lab 8 Quiz 3 Due 13 4/17/2023 (Mon) Package Vignettes/Reprex Wickham, H., \u0026amp; Bryan, J. (2023). 18 Vignettes. In R Packages (2nd ed.). O'Reilly. 13 4/19/2023 (Wed) Package Website Wickham, H., \u0026amp; Bryan, J. (2023). 20 Website. In R Packages (2nd ed.). O'Reilly. Lab 8 13 4/21/2023 (Fri) Lab 9 14 4/24/2023 (Mon) Student's Choice 14 4/26/2023 (Wed) Student's Choice Lab 9 14 4/28/2023 (Fri) Finals Work Time 2, Quiz 4 Open Final Standards Draft 15 4/1/2023 (Mon) Finals Work Time 3 15 4/3/2023 (Wed) Finals Showcase Final Presentation 15 4/5/2023 (Fri) No Class Quiz 4 Due "},{"uri":"https://Adv-R-Programming.github.io/Adv-R-Reader/tags/","title":"Tags","tags":[],"description":"","content":""}]